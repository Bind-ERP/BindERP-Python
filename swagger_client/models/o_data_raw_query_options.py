# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ODataRawQueryOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'str',
        'order_by': 'str',
        'top': 'str',
        'skip': 'str',
        'select': 'str',
        'expand': 'str',
        'inline_count': 'str',
        'format': 'str',
        'skip_token': 'str'
    }

    attribute_map = {
        'filter': 'Filter',
        'order_by': 'OrderBy',
        'top': 'Top',
        'skip': 'Skip',
        'select': 'Select',
        'expand': 'Expand',
        'inline_count': 'InlineCount',
        'format': 'Format',
        'skip_token': 'SkipToken'
    }

    def __init__(self, filter=None, order_by=None, top=None, skip=None, select=None, expand=None, inline_count=None, format=None, skip_token=None):  # noqa: E501
        """ODataRawQueryOptions - a model defined in Swagger"""  # noqa: E501

        self._filter = None
        self._order_by = None
        self._top = None
        self._skip = None
        self._select = None
        self._expand = None
        self._inline_count = None
        self._format = None
        self._skip_token = None
        self.discriminator = None

        if filter is not None:
            self.filter = filter
        if order_by is not None:
            self.order_by = order_by
        if top is not None:
            self.top = top
        if skip is not None:
            self.skip = skip
        if select is not None:
            self.select = select
        if expand is not None:
            self.expand = expand
        if inline_count is not None:
            self.inline_count = inline_count
        if format is not None:
            self.format = format
        if skip_token is not None:
            self.skip_token = skip_token

    @property
    def filter(self):
        """Gets the filter of this ODataRawQueryOptions.  # noqa: E501


        :return: The filter of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ODataRawQueryOptions.


        :param filter: The filter of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def order_by(self):
        """Gets the order_by of this ODataRawQueryOptions.  # noqa: E501


        :return: The order_by of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ODataRawQueryOptions.


        :param order_by: The order_by of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def top(self):
        """Gets the top of this ODataRawQueryOptions.  # noqa: E501


        :return: The top of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this ODataRawQueryOptions.


        :param top: The top of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._top = top

    @property
    def skip(self):
        """Gets the skip of this ODataRawQueryOptions.  # noqa: E501


        :return: The skip of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this ODataRawQueryOptions.


        :param skip: The skip of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._skip = skip

    @property
    def select(self):
        """Gets the select of this ODataRawQueryOptions.  # noqa: E501


        :return: The select of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this ODataRawQueryOptions.


        :param select: The select of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._select = select

    @property
    def expand(self):
        """Gets the expand of this ODataRawQueryOptions.  # noqa: E501


        :return: The expand of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this ODataRawQueryOptions.


        :param expand: The expand of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def inline_count(self):
        """Gets the inline_count of this ODataRawQueryOptions.  # noqa: E501


        :return: The inline_count of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._inline_count

    @inline_count.setter
    def inline_count(self, inline_count):
        """Sets the inline_count of this ODataRawQueryOptions.


        :param inline_count: The inline_count of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._inline_count = inline_count

    @property
    def format(self):
        """Gets the format of this ODataRawQueryOptions.  # noqa: E501


        :return: The format of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ODataRawQueryOptions.


        :param format: The format of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def skip_token(self):
        """Gets the skip_token of this ODataRawQueryOptions.  # noqa: E501


        :return: The skip_token of this ODataRawQueryOptions.  # noqa: E501
        :rtype: str
        """
        return self._skip_token

    @skip_token.setter
    def skip_token(self, skip_token):
        """Sets the skip_token of this ODataRawQueryOptions.


        :param skip_token: The skip_token of this ODataRawQueryOptions.  # noqa: E501
        :type: str
        """

        self._skip_token = skip_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODataRawQueryOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
