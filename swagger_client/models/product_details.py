# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.product_alternative_units import ProductAlternativeUnits  # noqa: F401,E501
from swagger_client.models.product_inventories import ProductInventories  # noqa: F401,E501
from swagger_client.models.product_prices import ProductPrices  # noqa: F401,E501


class ProductDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'title': 'str',
        'description': 'str',
        'creation_date': 'datetime',
        'cost': 'float',
        'sku': 'str',
        'comments': 'str',
        'cost_type': 'int',
        'category1_id': 'str',
        'category1': 'str',
        'category2_id': 'str',
        'category2': 'str',
        'category3_id': 'str',
        'category3': 'str',
        'current_inventory': 'float',
        'charge_vat': 'bool',
        'number': 'int',
        'pricing_type': 'int',
        'unit': 'str',
        'currency_id': 'str',
        'currency_code': 'str',
        'purchase_type': 'int',
        'ieps_rate': 'float',
        'type': 'int',
        'production_auto': 'bool',
        'prices': 'ProductPrices',
        'inventories': 'list[ProductInventories]',
        'alternative_units': 'list[ProductAlternativeUnits]'
    }

    attribute_map = {
        'id': 'ID',
        'code': 'Code',
        'title': 'Title',
        'description': 'Description',
        'creation_date': 'CreationDate',
        'cost': 'Cost',
        'sku': 'SKU',
        'comments': 'Comments',
        'cost_type': 'CostType',
        'category1_id': 'Category1ID',
        'category1': 'Category1',
        'category2_id': 'Category2ID',
        'category2': 'Category2',
        'category3_id': 'Category3ID',
        'category3': 'Category3',
        'current_inventory': 'CurrentInventory',
        'charge_vat': 'ChargeVAT',
        'number': 'Number',
        'pricing_type': 'PricingType',
        'unit': 'Unit',
        'currency_id': 'CurrencyID',
        'currency_code': 'CurrencyCode',
        'purchase_type': 'PurchaseType',
        'ieps_rate': 'IEPSRate',
        'type': 'Type',
        'production_auto': 'ProductionAuto',
        'prices': 'Prices',
        'inventories': 'Inventories',
        'alternative_units': 'AlternativeUnits'
    }

    def __init__(self, id=None, code=None, title=None, description=None, creation_date=None, cost=None, sku=None, comments=None, cost_type=None, category1_id=None, category1=None, category2_id=None, category2=None, category3_id=None, category3=None, current_inventory=None, charge_vat=None, number=None, pricing_type=None, unit=None, currency_id=None, currency_code=None, purchase_type=None, ieps_rate=None, type=None, production_auto=None, prices=None, inventories=None, alternative_units=None):  # noqa: E501
        """ProductDetails - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._title = None
        self._description = None
        self._creation_date = None
        self._cost = None
        self._sku = None
        self._comments = None
        self._cost_type = None
        self._category1_id = None
        self._category1 = None
        self._category2_id = None
        self._category2 = None
        self._category3_id = None
        self._category3 = None
        self._current_inventory = None
        self._charge_vat = None
        self._number = None
        self._pricing_type = None
        self._unit = None
        self._currency_id = None
        self._currency_code = None
        self._purchase_type = None
        self._ieps_rate = None
        self._type = None
        self._production_auto = None
        self._prices = None
        self._inventories = None
        self._alternative_units = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if creation_date is not None:
            self.creation_date = creation_date
        if cost is not None:
            self.cost = cost
        if sku is not None:
            self.sku = sku
        if comments is not None:
            self.comments = comments
        if cost_type is not None:
            self.cost_type = cost_type
        if category1_id is not None:
            self.category1_id = category1_id
        if category1 is not None:
            self.category1 = category1
        if category2_id is not None:
            self.category2_id = category2_id
        if category2 is not None:
            self.category2 = category2
        if category3_id is not None:
            self.category3_id = category3_id
        if category3 is not None:
            self.category3 = category3
        if current_inventory is not None:
            self.current_inventory = current_inventory
        if charge_vat is not None:
            self.charge_vat = charge_vat
        if number is not None:
            self.number = number
        if pricing_type is not None:
            self.pricing_type = pricing_type
        if unit is not None:
            self.unit = unit
        if currency_id is not None:
            self.currency_id = currency_id
        if currency_code is not None:
            self.currency_code = currency_code
        if purchase_type is not None:
            self.purchase_type = purchase_type
        if ieps_rate is not None:
            self.ieps_rate = ieps_rate
        if type is not None:
            self.type = type
        if production_auto is not None:
            self.production_auto = production_auto
        if prices is not None:
            self.prices = prices
        if inventories is not None:
            self.inventories = inventories
        if alternative_units is not None:
            self.alternative_units = alternative_units

    @property
    def id(self):
        """Gets the id of this ProductDetails.  # noqa: E501


        :return: The id of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductDetails.


        :param id: The id of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this ProductDetails.  # noqa: E501


        :return: The code of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProductDetails.


        :param code: The code of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def title(self):
        """Gets the title of this ProductDetails.  # noqa: E501


        :return: The title of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProductDetails.


        :param title: The title of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this ProductDetails.  # noqa: E501


        :return: The description of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductDetails.


        :param description: The description of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def creation_date(self):
        """Gets the creation_date of this ProductDetails.  # noqa: E501


        :return: The creation_date of this ProductDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ProductDetails.


        :param creation_date: The creation_date of this ProductDetails.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def cost(self):
        """Gets the cost of this ProductDetails.  # noqa: E501


        :return: The cost of this ProductDetails.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ProductDetails.


        :param cost: The cost of this ProductDetails.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def sku(self):
        """Gets the sku of this ProductDetails.  # noqa: E501


        :return: The sku of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductDetails.


        :param sku: The sku of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def comments(self):
        """Gets the comments of this ProductDetails.  # noqa: E501


        :return: The comments of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ProductDetails.


        :param comments: The comments of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def cost_type(self):
        """Gets the cost_type of this ProductDetails.  # noqa: E501


        :return: The cost_type of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this ProductDetails.


        :param cost_type: The cost_type of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._cost_type = cost_type

    @property
    def category1_id(self):
        """Gets the category1_id of this ProductDetails.  # noqa: E501


        :return: The category1_id of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._category1_id

    @category1_id.setter
    def category1_id(self, category1_id):
        """Sets the category1_id of this ProductDetails.


        :param category1_id: The category1_id of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._category1_id = category1_id

    @property
    def category1(self):
        """Gets the category1 of this ProductDetails.  # noqa: E501


        :return: The category1 of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._category1

    @category1.setter
    def category1(self, category1):
        """Sets the category1 of this ProductDetails.


        :param category1: The category1 of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._category1 = category1

    @property
    def category2_id(self):
        """Gets the category2_id of this ProductDetails.  # noqa: E501


        :return: The category2_id of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._category2_id

    @category2_id.setter
    def category2_id(self, category2_id):
        """Sets the category2_id of this ProductDetails.


        :param category2_id: The category2_id of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._category2_id = category2_id

    @property
    def category2(self):
        """Gets the category2 of this ProductDetails.  # noqa: E501


        :return: The category2 of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._category2

    @category2.setter
    def category2(self, category2):
        """Sets the category2 of this ProductDetails.


        :param category2: The category2 of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._category2 = category2

    @property
    def category3_id(self):
        """Gets the category3_id of this ProductDetails.  # noqa: E501


        :return: The category3_id of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._category3_id

    @category3_id.setter
    def category3_id(self, category3_id):
        """Sets the category3_id of this ProductDetails.


        :param category3_id: The category3_id of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._category3_id = category3_id

    @property
    def category3(self):
        """Gets the category3 of this ProductDetails.  # noqa: E501


        :return: The category3 of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._category3

    @category3.setter
    def category3(self, category3):
        """Sets the category3 of this ProductDetails.


        :param category3: The category3 of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._category3 = category3

    @property
    def current_inventory(self):
        """Gets the current_inventory of this ProductDetails.  # noqa: E501


        :return: The current_inventory of this ProductDetails.  # noqa: E501
        :rtype: float
        """
        return self._current_inventory

    @current_inventory.setter
    def current_inventory(self, current_inventory):
        """Sets the current_inventory of this ProductDetails.


        :param current_inventory: The current_inventory of this ProductDetails.  # noqa: E501
        :type: float
        """

        self._current_inventory = current_inventory

    @property
    def charge_vat(self):
        """Gets the charge_vat of this ProductDetails.  # noqa: E501


        :return: The charge_vat of this ProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._charge_vat

    @charge_vat.setter
    def charge_vat(self, charge_vat):
        """Sets the charge_vat of this ProductDetails.


        :param charge_vat: The charge_vat of this ProductDetails.  # noqa: E501
        :type: bool
        """

        self._charge_vat = charge_vat

    @property
    def number(self):
        """Gets the number of this ProductDetails.  # noqa: E501


        :return: The number of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProductDetails.


        :param number: The number of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def pricing_type(self):
        """Gets the pricing_type of this ProductDetails.  # noqa: E501


        :return: The pricing_type of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this ProductDetails.


        :param pricing_type: The pricing_type of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._pricing_type = pricing_type

    @property
    def unit(self):
        """Gets the unit of this ProductDetails.  # noqa: E501


        :return: The unit of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProductDetails.


        :param unit: The unit of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def currency_id(self):
        """Gets the currency_id of this ProductDetails.  # noqa: E501


        :return: The currency_id of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ProductDetails.


        :param currency_id: The currency_id of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def currency_code(self):
        """Gets the currency_code of this ProductDetails.  # noqa: E501


        :return: The currency_code of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ProductDetails.


        :param currency_code: The currency_code of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def purchase_type(self):
        """Gets the purchase_type of this ProductDetails.  # noqa: E501


        :return: The purchase_type of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._purchase_type

    @purchase_type.setter
    def purchase_type(self, purchase_type):
        """Sets the purchase_type of this ProductDetails.


        :param purchase_type: The purchase_type of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._purchase_type = purchase_type

    @property
    def ieps_rate(self):
        """Gets the ieps_rate of this ProductDetails.  # noqa: E501


        :return: The ieps_rate of this ProductDetails.  # noqa: E501
        :rtype: float
        """
        return self._ieps_rate

    @ieps_rate.setter
    def ieps_rate(self, ieps_rate):
        """Sets the ieps_rate of this ProductDetails.


        :param ieps_rate: The ieps_rate of this ProductDetails.  # noqa: E501
        :type: float
        """

        self._ieps_rate = ieps_rate

    @property
    def type(self):
        """Gets the type of this ProductDetails.  # noqa: E501


        :return: The type of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductDetails.


        :param type: The type of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def production_auto(self):
        """Gets the production_auto of this ProductDetails.  # noqa: E501


        :return: The production_auto of this ProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._production_auto

    @production_auto.setter
    def production_auto(self, production_auto):
        """Sets the production_auto of this ProductDetails.


        :param production_auto: The production_auto of this ProductDetails.  # noqa: E501
        :type: bool
        """

        self._production_auto = production_auto

    @property
    def prices(self):
        """Gets the prices of this ProductDetails.  # noqa: E501


        :return: The prices of this ProductDetails.  # noqa: E501
        :rtype: ProductPrices
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ProductDetails.


        :param prices: The prices of this ProductDetails.  # noqa: E501
        :type: ProductPrices
        """

        self._prices = prices

    @property
    def inventories(self):
        """Gets the inventories of this ProductDetails.  # noqa: E501


        :return: The inventories of this ProductDetails.  # noqa: E501
        :rtype: list[ProductInventories]
        """
        return self._inventories

    @inventories.setter
    def inventories(self, inventories):
        """Sets the inventories of this ProductDetails.


        :param inventories: The inventories of this ProductDetails.  # noqa: E501
        :type: list[ProductInventories]
        """

        self._inventories = inventories

    @property
    def alternative_units(self):
        """Gets the alternative_units of this ProductDetails.  # noqa: E501


        :return: The alternative_units of this ProductDetails.  # noqa: E501
        :rtype: list[ProductAlternativeUnits]
        """
        return self._alternative_units

    @alternative_units.setter
    def alternative_units(self, alternative_units):
        """Sets the alternative_units of this ProductDetails.


        :param alternative_units: The alternative_units of this ProductDetails.  # noqa: E501
        :type: list[ProductAlternativeUnits]
        """

        self._alternative_units = alternative_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
