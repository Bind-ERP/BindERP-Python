# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IEdmTerm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term_kind': 'str',
        'schema_element_kind': 'str',
        'namespace': 'str',
        'name': 'str'
    }

    attribute_map = {
        'term_kind': 'TermKind',
        'schema_element_kind': 'SchemaElementKind',
        'namespace': 'Namespace',
        'name': 'Name'
    }

    def __init__(self, term_kind=None, schema_element_kind=None, namespace=None, name=None):  # noqa: E501
        """IEdmTerm - a model defined in Swagger"""  # noqa: E501

        self._term_kind = None
        self._schema_element_kind = None
        self._namespace = None
        self._name = None
        self.discriminator = None

        if term_kind is not None:
            self.term_kind = term_kind
        if schema_element_kind is not None:
            self.schema_element_kind = schema_element_kind
        if namespace is not None:
            self.namespace = namespace
        if name is not None:
            self.name = name

    @property
    def term_kind(self):
        """Gets the term_kind of this IEdmTerm.  # noqa: E501


        :return: The term_kind of this IEdmTerm.  # noqa: E501
        :rtype: str
        """
        return self._term_kind

    @term_kind.setter
    def term_kind(self, term_kind):
        """Sets the term_kind of this IEdmTerm.


        :param term_kind: The term_kind of this IEdmTerm.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Type", "Value"]  # noqa: E501
        if term_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `term_kind` ({0}), must be one of {1}"  # noqa: E501
                .format(term_kind, allowed_values)
            )

        self._term_kind = term_kind

    @property
    def schema_element_kind(self):
        """Gets the schema_element_kind of this IEdmTerm.  # noqa: E501


        :return: The schema_element_kind of this IEdmTerm.  # noqa: E501
        :rtype: str
        """
        return self._schema_element_kind

    @schema_element_kind.setter
    def schema_element_kind(self, schema_element_kind):
        """Sets the schema_element_kind of this IEdmTerm.


        :param schema_element_kind: The schema_element_kind of this IEdmTerm.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "TypeDefinition", "Function", "ValueTerm", "EntityContainer"]  # noqa: E501
        if schema_element_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_element_kind` ({0}), must be one of {1}"  # noqa: E501
                .format(schema_element_kind, allowed_values)
            )

        self._schema_element_kind = schema_element_kind

    @property
    def namespace(self):
        """Gets the namespace of this IEdmTerm.  # noqa: E501


        :return: The namespace of this IEdmTerm.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IEdmTerm.


        :param namespace: The namespace of this IEdmTerm.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this IEdmTerm.  # noqa: E501


        :return: The name of this IEdmTerm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IEdmTerm.


        :param name: The name of this IEdmTerm.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IEdmTerm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
