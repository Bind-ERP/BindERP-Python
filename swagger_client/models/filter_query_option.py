# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.filter_clause import FilterClause  # noqa: F401,E501
from swagger_client.models.filter_query_validator import FilterQueryValidator  # noqa: F401,E501
from swagger_client.models.o_data_query_context import ODataQueryContext  # noqa: F401,E501


class FilterQueryOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'ODataQueryContext',
        'validator': 'FilterQueryValidator',
        'filter_clause': 'FilterClause',
        'raw_value': 'str'
    }

    attribute_map = {
        'context': 'Context',
        'validator': 'Validator',
        'filter_clause': 'FilterClause',
        'raw_value': 'RawValue'
    }

    def __init__(self, context=None, validator=None, filter_clause=None, raw_value=None):  # noqa: E501
        """FilterQueryOption - a model defined in Swagger"""  # noqa: E501

        self._context = None
        self._validator = None
        self._filter_clause = None
        self._raw_value = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if validator is not None:
            self.validator = validator
        if filter_clause is not None:
            self.filter_clause = filter_clause
        if raw_value is not None:
            self.raw_value = raw_value

    @property
    def context(self):
        """Gets the context of this FilterQueryOption.  # noqa: E501


        :return: The context of this FilterQueryOption.  # noqa: E501
        :rtype: ODataQueryContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this FilterQueryOption.


        :param context: The context of this FilterQueryOption.  # noqa: E501
        :type: ODataQueryContext
        """

        self._context = context

    @property
    def validator(self):
        """Gets the validator of this FilterQueryOption.  # noqa: E501


        :return: The validator of this FilterQueryOption.  # noqa: E501
        :rtype: FilterQueryValidator
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this FilterQueryOption.


        :param validator: The validator of this FilterQueryOption.  # noqa: E501
        :type: FilterQueryValidator
        """

        self._validator = validator

    @property
    def filter_clause(self):
        """Gets the filter_clause of this FilterQueryOption.  # noqa: E501


        :return: The filter_clause of this FilterQueryOption.  # noqa: E501
        :rtype: FilterClause
        """
        return self._filter_clause

    @filter_clause.setter
    def filter_clause(self, filter_clause):
        """Sets the filter_clause of this FilterQueryOption.


        :param filter_clause: The filter_clause of this FilterQueryOption.  # noqa: E501
        :type: FilterClause
        """

        self._filter_clause = filter_clause

    @property
    def raw_value(self):
        """Gets the raw_value of this FilterQueryOption.  # noqa: E501


        :return: The raw_value of this FilterQueryOption.  # noqa: E501
        :rtype: str
        """
        return self._raw_value

    @raw_value.setter
    def raw_value(self, raw_value):
        """Sets the raw_value of this FilterQueryOption.


        :param raw_value: The raw_value of this FilterQueryOption.  # noqa: E501
        :type: str
        """

        self._raw_value = raw_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterQueryOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
