# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Inventory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'float',
        'client_ordered': 'float',
        'current_inventory': 'float',
        'id': 'str',
        'location': 'str',
        'provided_ordered': 'float',
        'sku': 'str',
        'title': 'str',
        'value': 'float',
        'code': 'str'
    }

    attribute_map = {
        'balance': 'Balance',
        'client_ordered': 'ClientOrdered',
        'current_inventory': 'CurrentInventory',
        'id': 'ID',
        'location': 'Location',
        'provided_ordered': 'ProvidedOrdered',
        'sku': 'SKU',
        'title': 'Title',
        'value': 'Value',
        'code': 'Code'
    }

    def __init__(self, balance=None, client_ordered=None, current_inventory=None, id=None, location=None, provided_ordered=None, sku=None, title=None, value=None, code=None):  # noqa: E501
        """Inventory - a model defined in Swagger"""  # noqa: E501

        self._balance = None
        self._client_ordered = None
        self._current_inventory = None
        self._id = None
        self._location = None
        self._provided_ordered = None
        self._sku = None
        self._title = None
        self._value = None
        self._code = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if client_ordered is not None:
            self.client_ordered = client_ordered
        if current_inventory is not None:
            self.current_inventory = current_inventory
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if provided_ordered is not None:
            self.provided_ordered = provided_ordered
        if sku is not None:
            self.sku = sku
        if title is not None:
            self.title = title
        if value is not None:
            self.value = value
        if code is not None:
            self.code = code

    @property
    def balance(self):
        """Gets the balance of this Inventory.  # noqa: E501


        :return: The balance of this Inventory.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Inventory.


        :param balance: The balance of this Inventory.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def client_ordered(self):
        """Gets the client_ordered of this Inventory.  # noqa: E501


        :return: The client_ordered of this Inventory.  # noqa: E501
        :rtype: float
        """
        return self._client_ordered

    @client_ordered.setter
    def client_ordered(self, client_ordered):
        """Sets the client_ordered of this Inventory.


        :param client_ordered: The client_ordered of this Inventory.  # noqa: E501
        :type: float
        """

        self._client_ordered = client_ordered

    @property
    def current_inventory(self):
        """Gets the current_inventory of this Inventory.  # noqa: E501


        :return: The current_inventory of this Inventory.  # noqa: E501
        :rtype: float
        """
        return self._current_inventory

    @current_inventory.setter
    def current_inventory(self, current_inventory):
        """Sets the current_inventory of this Inventory.


        :param current_inventory: The current_inventory of this Inventory.  # noqa: E501
        :type: float
        """

        self._current_inventory = current_inventory

    @property
    def id(self):
        """Gets the id of this Inventory.  # noqa: E501


        :return: The id of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Inventory.


        :param id: The id of this Inventory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this Inventory.  # noqa: E501


        :return: The location of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Inventory.


        :param location: The location of this Inventory.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def provided_ordered(self):
        """Gets the provided_ordered of this Inventory.  # noqa: E501


        :return: The provided_ordered of this Inventory.  # noqa: E501
        :rtype: float
        """
        return self._provided_ordered

    @provided_ordered.setter
    def provided_ordered(self, provided_ordered):
        """Sets the provided_ordered of this Inventory.


        :param provided_ordered: The provided_ordered of this Inventory.  # noqa: E501
        :type: float
        """

        self._provided_ordered = provided_ordered

    @property
    def sku(self):
        """Gets the sku of this Inventory.  # noqa: E501


        :return: The sku of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Inventory.


        :param sku: The sku of this Inventory.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def title(self):
        """Gets the title of this Inventory.  # noqa: E501


        :return: The title of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Inventory.


        :param title: The title of this Inventory.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def value(self):
        """Gets the value of this Inventory.  # noqa: E501


        :return: The value of this Inventory.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Inventory.


        :param value: The value of this Inventory.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def code(self):
        """Gets the code of this Inventory.  # noqa: E501


        :return: The code of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Inventory.


        :param code: The code of this Inventory.  # noqa: E501
        :type: str
        """

        self._code = code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Inventory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
