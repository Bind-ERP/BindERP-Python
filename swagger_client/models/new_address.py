# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street_name': 'str',
        'interior_number': 'str',
        'exterior_number': 'str',
        'colonia': 'str',
        'comments': 'str',
        'zip_code': 'str',
        'localidad': 'str',
        'city': 'str',
        'state': 'str'
    }

    attribute_map = {
        'street_name': 'StreetName',
        'interior_number': 'InteriorNumber',
        'exterior_number': 'ExteriorNumber',
        'colonia': 'Colonia',
        'comments': 'Comments',
        'zip_code': 'ZipCode',
        'localidad': 'Localidad',
        'city': 'City',
        'state': 'State'
    }

    def __init__(self, street_name=None, interior_number=None, exterior_number=None, colonia=None, comments=None, zip_code=None, localidad=None, city=None, state=None):  # noqa: E501
        """NewAddress - a model defined in Swagger"""  # noqa: E501

        self._street_name = None
        self._interior_number = None
        self._exterior_number = None
        self._colonia = None
        self._comments = None
        self._zip_code = None
        self._localidad = None
        self._city = None
        self._state = None
        self.discriminator = None

        self.street_name = street_name
        if interior_number is not None:
            self.interior_number = interior_number
        self.exterior_number = exterior_number
        self.colonia = colonia
        if comments is not None:
            self.comments = comments
        self.zip_code = zip_code
        if localidad is not None:
            self.localidad = localidad
        self.city = city
        self.state = state

    @property
    def street_name(self):
        """Gets the street_name of this NewAddress.  # noqa: E501


        :return: The street_name of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this NewAddress.


        :param street_name: The street_name of this NewAddress.  # noqa: E501
        :type: str
        """
        if street_name is None:
            raise ValueError("Invalid value for `street_name`, must not be `None`")  # noqa: E501

        self._street_name = street_name

    @property
    def interior_number(self):
        """Gets the interior_number of this NewAddress.  # noqa: E501


        :return: The interior_number of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._interior_number

    @interior_number.setter
    def interior_number(self, interior_number):
        """Sets the interior_number of this NewAddress.


        :param interior_number: The interior_number of this NewAddress.  # noqa: E501
        :type: str
        """

        self._interior_number = interior_number

    @property
    def exterior_number(self):
        """Gets the exterior_number of this NewAddress.  # noqa: E501


        :return: The exterior_number of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._exterior_number

    @exterior_number.setter
    def exterior_number(self, exterior_number):
        """Sets the exterior_number of this NewAddress.


        :param exterior_number: The exterior_number of this NewAddress.  # noqa: E501
        :type: str
        """
        if exterior_number is None:
            raise ValueError("Invalid value for `exterior_number`, must not be `None`")  # noqa: E501

        self._exterior_number = exterior_number

    @property
    def colonia(self):
        """Gets the colonia of this NewAddress.  # noqa: E501


        :return: The colonia of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._colonia

    @colonia.setter
    def colonia(self, colonia):
        """Sets the colonia of this NewAddress.


        :param colonia: The colonia of this NewAddress.  # noqa: E501
        :type: str
        """
        if colonia is None:
            raise ValueError("Invalid value for `colonia`, must not be `None`")  # noqa: E501

        self._colonia = colonia

    @property
    def comments(self):
        """Gets the comments of this NewAddress.  # noqa: E501


        :return: The comments of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this NewAddress.


        :param comments: The comments of this NewAddress.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def zip_code(self):
        """Gets the zip_code of this NewAddress.  # noqa: E501


        :return: The zip_code of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this NewAddress.


        :param zip_code: The zip_code of this NewAddress.  # noqa: E501
        :type: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")  # noqa: E501

        self._zip_code = zip_code

    @property
    def localidad(self):
        """Gets the localidad of this NewAddress.  # noqa: E501


        :return: The localidad of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._localidad

    @localidad.setter
    def localidad(self, localidad):
        """Sets the localidad of this NewAddress.


        :param localidad: The localidad of this NewAddress.  # noqa: E501
        :type: str
        """

        self._localidad = localidad

    @property
    def city(self):
        """Gets the city of this NewAddress.  # noqa: E501


        :return: The city of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this NewAddress.


        :param city: The city of this NewAddress.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this NewAddress.  # noqa: E501


        :return: The state of this NewAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NewAddress.


        :param state: The state of this NewAddress.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
