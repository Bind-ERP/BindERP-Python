# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProviderListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'number': 'int',
        'provider_name': 'str',
        'legal_name': 'str',
        'rfc': 'str',
        'email': 'str',
        'phone': 'str',
        'city': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'number': 'Number',
        'provider_name': 'ProviderName',
        'legal_name': 'LegalName',
        'rfc': 'RFC',
        'email': 'Email',
        'phone': 'Phone',
        'city': 'City'
    }

    def __init__(self, id=None, number=None, provider_name=None, legal_name=None, rfc=None, email=None, phone=None, city=None):  # noqa: E501
        """ProviderListItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._number = None
        self._provider_name = None
        self._legal_name = None
        self._rfc = None
        self._email = None
        self._phone = None
        self._city = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if number is not None:
            self.number = number
        if provider_name is not None:
            self.provider_name = provider_name
        if legal_name is not None:
            self.legal_name = legal_name
        if rfc is not None:
            self.rfc = rfc
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if city is not None:
            self.city = city

    @property
    def id(self):
        """Gets the id of this ProviderListItem.  # noqa: E501


        :return: The id of this ProviderListItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderListItem.


        :param id: The id of this ProviderListItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this ProviderListItem.  # noqa: E501


        :return: The number of this ProviderListItem.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProviderListItem.


        :param number: The number of this ProviderListItem.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def provider_name(self):
        """Gets the provider_name of this ProviderListItem.  # noqa: E501


        :return: The provider_name of this ProviderListItem.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this ProviderListItem.


        :param provider_name: The provider_name of this ProviderListItem.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def legal_name(self):
        """Gets the legal_name of this ProviderListItem.  # noqa: E501


        :return: The legal_name of this ProviderListItem.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this ProviderListItem.


        :param legal_name: The legal_name of this ProviderListItem.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def rfc(self):
        """Gets the rfc of this ProviderListItem.  # noqa: E501


        :return: The rfc of this ProviderListItem.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this ProviderListItem.


        :param rfc: The rfc of this ProviderListItem.  # noqa: E501
        :type: str
        """

        self._rfc = rfc

    @property
    def email(self):
        """Gets the email of this ProviderListItem.  # noqa: E501


        :return: The email of this ProviderListItem.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProviderListItem.


        :param email: The email of this ProviderListItem.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this ProviderListItem.  # noqa: E501


        :return: The phone of this ProviderListItem.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ProviderListItem.


        :param phone: The phone of this ProviderListItem.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def city(self):
        """Gets the city of this ProviderListItem.  # noqa: E501


        :return: The city of this ProviderListItem.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ProviderListItem.


        :param city: The city of this ProviderListItem.  # noqa: E501
        :type: str
        """

        self._city = city

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
