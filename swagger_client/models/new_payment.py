# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_id': 'str',
        'account_id': 'str',
        'date': 'datetime',
        'reference': 'str',
        'comments': 'str',
        'amount': 'float',
        'payment_term': 'int',
        'exchange_rate': 'float',
        'exchange_rate_account': 'float'
    }

    attribute_map = {
        'invoice_id': 'InvoiceID',
        'account_id': 'AccountID',
        'date': 'Date',
        'reference': 'Reference',
        'comments': 'Comments',
        'amount': 'Amount',
        'payment_term': 'PaymentTerm',
        'exchange_rate': 'ExchangeRate',
        'exchange_rate_account': 'ExchangeRateAccount'
    }

    def __init__(self, invoice_id=None, account_id=None, date=None, reference=None, comments=None, amount=None, payment_term=None, exchange_rate=None, exchange_rate_account=None):  # noqa: E501
        """NewPayment - a model defined in Swagger"""  # noqa: E501

        self._invoice_id = None
        self._account_id = None
        self._date = None
        self._reference = None
        self._comments = None
        self._amount = None
        self._payment_term = None
        self._exchange_rate = None
        self._exchange_rate_account = None
        self.discriminator = None

        self.invoice_id = invoice_id
        self.account_id = account_id
        self.date = date
        self.reference = reference
        if comments is not None:
            self.comments = comments
        self.amount = amount
        self.payment_term = payment_term
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if exchange_rate_account is not None:
            self.exchange_rate_account = exchange_rate_account

    @property
    def invoice_id(self):
        """Gets the invoice_id of this NewPayment.  # noqa: E501


        :return: The invoice_id of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this NewPayment.


        :param invoice_id: The invoice_id of this NewPayment.  # noqa: E501
        :type: str
        """
        if invoice_id is None:
            raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def account_id(self):
        """Gets the account_id of this NewPayment.  # noqa: E501


        :return: The account_id of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this NewPayment.


        :param account_id: The account_id of this NewPayment.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def date(self):
        """Gets the date of this NewPayment.  # noqa: E501


        :return: The date of this NewPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this NewPayment.


        :param date: The date of this NewPayment.  # noqa: E501
        :type: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def reference(self):
        """Gets the reference of this NewPayment.  # noqa: E501


        :return: The reference of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this NewPayment.


        :param reference: The reference of this NewPayment.  # noqa: E501
        :type: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def comments(self):
        """Gets the comments of this NewPayment.  # noqa: E501


        :return: The comments of this NewPayment.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this NewPayment.


        :param comments: The comments of this NewPayment.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def amount(self):
        """Gets the amount of this NewPayment.  # noqa: E501


        :return: The amount of this NewPayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewPayment.


        :param amount: The amount of this NewPayment.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def payment_term(self):
        """Gets the payment_term of this NewPayment.  # noqa: E501


        :return: The payment_term of this NewPayment.  # noqa: E501
        :rtype: int
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this NewPayment.


        :param payment_term: The payment_term of this NewPayment.  # noqa: E501
        :type: int
        """
        if payment_term is None:
            raise ValueError("Invalid value for `payment_term`, must not be `None`")  # noqa: E501

        self._payment_term = payment_term

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewPayment.  # noqa: E501


        :return: The exchange_rate of this NewPayment.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewPayment.


        :param exchange_rate: The exchange_rate of this NewPayment.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def exchange_rate_account(self):
        """Gets the exchange_rate_account of this NewPayment.  # noqa: E501


        :return: The exchange_rate_account of this NewPayment.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate_account

    @exchange_rate_account.setter
    def exchange_rate_account(self, exchange_rate_account):
        """Sets the exchange_rate_account of this NewPayment.


        :param exchange_rate_account: The exchange_rate_account of this NewPayment.  # noqa: E501
        :type: float
        """

        self._exchange_rate_account = exchange_rate_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
