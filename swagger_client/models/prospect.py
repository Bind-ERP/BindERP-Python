# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Prospect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'comments': 'str',
        'company': 'str',
        'email': 'str',
        'is_public': 'bool',
        'phone': 'str',
        'phone_ext': 'str',
        'name': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'comments': 'Comments',
        'company': 'Company',
        'email': 'Email',
        'is_public': 'IsPublic',
        'phone': 'Phone',
        'phone_ext': 'PhoneExt',
        'name': 'Name'
    }

    def __init__(self, id=None, comments=None, company=None, email=None, is_public=None, phone=None, phone_ext=None, name=None):  # noqa: E501
        """Prospect - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._comments = None
        self._company = None
        self._email = None
        self._is_public = None
        self._phone = None
        self._phone_ext = None
        self._name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if comments is not None:
            self.comments = comments
        if company is not None:
            self.company = company
        if email is not None:
            self.email = email
        if is_public is not None:
            self.is_public = is_public
        if phone is not None:
            self.phone = phone
        if phone_ext is not None:
            self.phone_ext = phone_ext
        self.name = name

    @property
    def id(self):
        """Gets the id of this Prospect.  # noqa: E501


        :return: The id of this Prospect.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Prospect.


        :param id: The id of this Prospect.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def comments(self):
        """Gets the comments of this Prospect.  # noqa: E501


        :return: The comments of this Prospect.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Prospect.


        :param comments: The comments of this Prospect.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def company(self):
        """Gets the company of this Prospect.  # noqa: E501


        :return: The company of this Prospect.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Prospect.


        :param company: The company of this Prospect.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def email(self):
        """Gets the email of this Prospect.  # noqa: E501


        :return: The email of this Prospect.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Prospect.


        :param email: The email of this Prospect.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def is_public(self):
        """Gets the is_public of this Prospect.  # noqa: E501


        :return: The is_public of this Prospect.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Prospect.


        :param is_public: The is_public of this Prospect.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def phone(self):
        """Gets the phone of this Prospect.  # noqa: E501


        :return: The phone of this Prospect.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Prospect.


        :param phone: The phone of this Prospect.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone_ext(self):
        """Gets the phone_ext of this Prospect.  # noqa: E501


        :return: The phone_ext of this Prospect.  # noqa: E501
        :rtype: str
        """
        return self._phone_ext

    @phone_ext.setter
    def phone_ext(self, phone_ext):
        """Sets the phone_ext of this Prospect.


        :param phone_ext: The phone_ext of this Prospect.  # noqa: E501
        :type: str
        """

        self._phone_ext = phone_ext

    @property
    def name(self):
        """Gets the name of this Prospect.  # noqa: E501


        :return: The name of this Prospect.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Prospect.


        :param name: The name of this Prospect.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Prospect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
