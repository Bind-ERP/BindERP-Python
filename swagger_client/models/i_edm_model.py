# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.i_edm_direct_value_annotations_manager import IEdmDirectValueAnnotationsManager  # noqa: F401,E501
from swagger_client.models.i_edm_model import IEdmModel  # noqa: F401,E501
from swagger_client.models.i_edm_schema_element import IEdmSchemaElement  # noqa: F401,E501
from swagger_client.models.i_edm_vocabulary_annotation import IEdmVocabularyAnnotation  # noqa: F401,E501


class IEdmModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_elements': 'list[IEdmSchemaElement]',
        'vocabulary_annotations': 'list[IEdmVocabularyAnnotation]',
        'referenced_models': 'list[IEdmModel]',
        'direct_value_annotations_manager': 'IEdmDirectValueAnnotationsManager'
    }

    attribute_map = {
        'schema_elements': 'SchemaElements',
        'vocabulary_annotations': 'VocabularyAnnotations',
        'referenced_models': 'ReferencedModels',
        'direct_value_annotations_manager': 'DirectValueAnnotationsManager'
    }

    def __init__(self, schema_elements=None, vocabulary_annotations=None, referenced_models=None, direct_value_annotations_manager=None):  # noqa: E501
        """IEdmModel - a model defined in Swagger"""  # noqa: E501

        self._schema_elements = None
        self._vocabulary_annotations = None
        self._referenced_models = None
        self._direct_value_annotations_manager = None
        self.discriminator = None

        if schema_elements is not None:
            self.schema_elements = schema_elements
        if vocabulary_annotations is not None:
            self.vocabulary_annotations = vocabulary_annotations
        if referenced_models is not None:
            self.referenced_models = referenced_models
        if direct_value_annotations_manager is not None:
            self.direct_value_annotations_manager = direct_value_annotations_manager

    @property
    def schema_elements(self):
        """Gets the schema_elements of this IEdmModel.  # noqa: E501


        :return: The schema_elements of this IEdmModel.  # noqa: E501
        :rtype: list[IEdmSchemaElement]
        """
        return self._schema_elements

    @schema_elements.setter
    def schema_elements(self, schema_elements):
        """Sets the schema_elements of this IEdmModel.


        :param schema_elements: The schema_elements of this IEdmModel.  # noqa: E501
        :type: list[IEdmSchemaElement]
        """

        self._schema_elements = schema_elements

    @property
    def vocabulary_annotations(self):
        """Gets the vocabulary_annotations of this IEdmModel.  # noqa: E501


        :return: The vocabulary_annotations of this IEdmModel.  # noqa: E501
        :rtype: list[IEdmVocabularyAnnotation]
        """
        return self._vocabulary_annotations

    @vocabulary_annotations.setter
    def vocabulary_annotations(self, vocabulary_annotations):
        """Sets the vocabulary_annotations of this IEdmModel.


        :param vocabulary_annotations: The vocabulary_annotations of this IEdmModel.  # noqa: E501
        :type: list[IEdmVocabularyAnnotation]
        """

        self._vocabulary_annotations = vocabulary_annotations

    @property
    def referenced_models(self):
        """Gets the referenced_models of this IEdmModel.  # noqa: E501


        :return: The referenced_models of this IEdmModel.  # noqa: E501
        :rtype: list[IEdmModel]
        """
        return self._referenced_models

    @referenced_models.setter
    def referenced_models(self, referenced_models):
        """Sets the referenced_models of this IEdmModel.


        :param referenced_models: The referenced_models of this IEdmModel.  # noqa: E501
        :type: list[IEdmModel]
        """

        self._referenced_models = referenced_models

    @property
    def direct_value_annotations_manager(self):
        """Gets the direct_value_annotations_manager of this IEdmModel.  # noqa: E501


        :return: The direct_value_annotations_manager of this IEdmModel.  # noqa: E501
        :rtype: IEdmDirectValueAnnotationsManager
        """
        return self._direct_value_annotations_manager

    @direct_value_annotations_manager.setter
    def direct_value_annotations_manager(self, direct_value_annotations_manager):
        """Sets the direct_value_annotations_manager of this IEdmModel.


        :param direct_value_annotations_manager: The direct_value_annotations_manager of this IEdmModel.  # noqa: E501
        :type: IEdmDirectValueAnnotationsManager
        """

        self._direct_value_annotations_manager = direct_value_annotations_manager

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IEdmModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
