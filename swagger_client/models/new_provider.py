# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'legal_name': 'str',
        'commercial_name': 'str',
        'rfc': 'str',
        'credit_days': 'int',
        'credit_amount': 'float',
        'sat_company_account_id': 'str',
        'location_id': 'str',
        'email': 'str',
        'telephones': 'str'
    }

    attribute_map = {
        'legal_name': 'LegalName',
        'commercial_name': 'CommercialName',
        'rfc': 'RFC',
        'credit_days': 'CreditDays',
        'credit_amount': 'CreditAmount',
        'sat_company_account_id': 'SATCompanyAccountID',
        'location_id': 'LocationID',
        'email': 'Email',
        'telephones': 'Telephones'
    }

    def __init__(self, legal_name=None, commercial_name=None, rfc=None, credit_days=None, credit_amount=None, sat_company_account_id=None, location_id=None, email=None, telephones=None):  # noqa: E501
        """NewProvider - a model defined in Swagger"""  # noqa: E501

        self._legal_name = None
        self._commercial_name = None
        self._rfc = None
        self._credit_days = None
        self._credit_amount = None
        self._sat_company_account_id = None
        self._location_id = None
        self._email = None
        self._telephones = None
        self.discriminator = None

        self.legal_name = legal_name
        self.commercial_name = commercial_name
        self.rfc = rfc
        self.credit_days = credit_days
        self.credit_amount = credit_amount
        if sat_company_account_id is not None:
            self.sat_company_account_id = sat_company_account_id
        if location_id is not None:
            self.location_id = location_id
        if email is not None:
            self.email = email
        if telephones is not None:
            self.telephones = telephones

    @property
    def legal_name(self):
        """Gets the legal_name of this NewProvider.  # noqa: E501


        :return: The legal_name of this NewProvider.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this NewProvider.


        :param legal_name: The legal_name of this NewProvider.  # noqa: E501
        :type: str
        """
        if legal_name is None:
            raise ValueError("Invalid value for `legal_name`, must not be `None`")  # noqa: E501

        self._legal_name = legal_name

    @property
    def commercial_name(self):
        """Gets the commercial_name of this NewProvider.  # noqa: E501


        :return: The commercial_name of this NewProvider.  # noqa: E501
        :rtype: str
        """
        return self._commercial_name

    @commercial_name.setter
    def commercial_name(self, commercial_name):
        """Sets the commercial_name of this NewProvider.


        :param commercial_name: The commercial_name of this NewProvider.  # noqa: E501
        :type: str
        """
        if commercial_name is None:
            raise ValueError("Invalid value for `commercial_name`, must not be `None`")  # noqa: E501

        self._commercial_name = commercial_name

    @property
    def rfc(self):
        """Gets the rfc of this NewProvider.  # noqa: E501


        :return: The rfc of this NewProvider.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this NewProvider.


        :param rfc: The rfc of this NewProvider.  # noqa: E501
        :type: str
        """
        if rfc is None:
            raise ValueError("Invalid value for `rfc`, must not be `None`")  # noqa: E501
        if rfc is not None and not re.search('[A-Z,a-z,ñ,Ñ,&]{3,4}[0-9]{2}[0-1][0-9][0-3][0-9][A-Z,a-z,0-9]?[A-Z,a-z,0-9]?[0-9,A-Z,a-z]?', rfc):  # noqa: E501
            raise ValueError("Invalid value for `rfc`, must be a follow pattern or equal to `/[A-Z,a-z,ñ,Ñ,&]{3,4}[0-9]{2}[0-1][0-9][0-3][0-9][A-Z,a-z,0-9]?[A-Z,a-z,0-9]?[0-9,A-Z,a-z]?/`")  # noqa: E501

        self._rfc = rfc

    @property
    def credit_days(self):
        """Gets the credit_days of this NewProvider.  # noqa: E501


        :return: The credit_days of this NewProvider.  # noqa: E501
        :rtype: int
        """
        return self._credit_days

    @credit_days.setter
    def credit_days(self, credit_days):
        """Sets the credit_days of this NewProvider.


        :param credit_days: The credit_days of this NewProvider.  # noqa: E501
        :type: int
        """
        if credit_days is None:
            raise ValueError("Invalid value for `credit_days`, must not be `None`")  # noqa: E501

        self._credit_days = credit_days

    @property
    def credit_amount(self):
        """Gets the credit_amount of this NewProvider.  # noqa: E501


        :return: The credit_amount of this NewProvider.  # noqa: E501
        :rtype: float
        """
        return self._credit_amount

    @credit_amount.setter
    def credit_amount(self, credit_amount):
        """Sets the credit_amount of this NewProvider.


        :param credit_amount: The credit_amount of this NewProvider.  # noqa: E501
        :type: float
        """
        if credit_amount is None:
            raise ValueError("Invalid value for `credit_amount`, must not be `None`")  # noqa: E501

        self._credit_amount = credit_amount

    @property
    def sat_company_account_id(self):
        """Gets the sat_company_account_id of this NewProvider.  # noqa: E501


        :return: The sat_company_account_id of this NewProvider.  # noqa: E501
        :rtype: str
        """
        return self._sat_company_account_id

    @sat_company_account_id.setter
    def sat_company_account_id(self, sat_company_account_id):
        """Sets the sat_company_account_id of this NewProvider.


        :param sat_company_account_id: The sat_company_account_id of this NewProvider.  # noqa: E501
        :type: str
        """

        self._sat_company_account_id = sat_company_account_id

    @property
    def location_id(self):
        """Gets the location_id of this NewProvider.  # noqa: E501


        :return: The location_id of this NewProvider.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this NewProvider.


        :param location_id: The location_id of this NewProvider.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def email(self):
        """Gets the email of this NewProvider.  # noqa: E501


        :return: The email of this NewProvider.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewProvider.


        :param email: The email of this NewProvider.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def telephones(self):
        """Gets the telephones of this NewProvider.  # noqa: E501


        :return: The telephones of this NewProvider.  # noqa: E501
        :rtype: str
        """
        return self._telephones

    @telephones.setter
    def telephones(self, telephones):
        """Sets the telephones of this NewProvider.


        :param telephones: The telephones of this NewProvider.  # noqa: E501
        :type: str
        """

        self._telephones = telephones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
