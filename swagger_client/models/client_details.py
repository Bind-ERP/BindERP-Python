# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'rfc': 'str',
        'legal_name': 'str',
        'commercial_name': 'str',
        'credit_days': 'int',
        'credit_amount': 'float',
        'payment_method': 'str',
        'creation_date': 'datetime',
        'status': 'str',
        'sales_contact': 'str',
        'credit_contact': 'str',
        'loctaion': 'str',
        'comments': 'str',
        'price_list': 'str',
        'payment_term_type': 'str',
        'email': 'str',
        'telephones': 'str',
        'number': 'int',
        'account_number': 'str',
        'default_discount': 'float',
        'client_source': 'str',
        'account': 'str',
        'addresses': 'list[str]'
    }

    attribute_map = {
        'id': 'ID',
        'rfc': 'RFC',
        'legal_name': 'LegalName',
        'commercial_name': 'CommercialName',
        'credit_days': 'CreditDays',
        'credit_amount': 'CreditAmount',
        'payment_method': 'PaymentMethod',
        'creation_date': 'CreationDate',
        'status': 'Status',
        'sales_contact': 'SalesContact',
        'credit_contact': 'CreditContact',
        'loctaion': 'Loctaion',
        'comments': 'Comments',
        'price_list': 'PriceList',
        'payment_term_type': 'PaymentTermType',
        'email': 'Email',
        'telephones': 'Telephones',
        'number': 'Number',
        'account_number': 'AccountNumber',
        'default_discount': 'DefaultDiscount',
        'client_source': 'ClientSource',
        'account': 'Account',
        'addresses': 'Addresses'
    }

    def __init__(self, id=None, rfc=None, legal_name=None, commercial_name=None, credit_days=None, credit_amount=None, payment_method=None, creation_date=None, status=None, sales_contact=None, credit_contact=None, loctaion=None, comments=None, price_list=None, payment_term_type=None, email=None, telephones=None, number=None, account_number=None, default_discount=None, client_source=None, account=None, addresses=None):  # noqa: E501
        """ClientDetails - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._rfc = None
        self._legal_name = None
        self._commercial_name = None
        self._credit_days = None
        self._credit_amount = None
        self._payment_method = None
        self._creation_date = None
        self._status = None
        self._sales_contact = None
        self._credit_contact = None
        self._loctaion = None
        self._comments = None
        self._price_list = None
        self._payment_term_type = None
        self._email = None
        self._telephones = None
        self._number = None
        self._account_number = None
        self._default_discount = None
        self._client_source = None
        self._account = None
        self._addresses = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if rfc is not None:
            self.rfc = rfc
        if legal_name is not None:
            self.legal_name = legal_name
        if commercial_name is not None:
            self.commercial_name = commercial_name
        if credit_days is not None:
            self.credit_days = credit_days
        if credit_amount is not None:
            self.credit_amount = credit_amount
        if payment_method is not None:
            self.payment_method = payment_method
        if creation_date is not None:
            self.creation_date = creation_date
        if status is not None:
            self.status = status
        if sales_contact is not None:
            self.sales_contact = sales_contact
        if credit_contact is not None:
            self.credit_contact = credit_contact
        if loctaion is not None:
            self.loctaion = loctaion
        if comments is not None:
            self.comments = comments
        if price_list is not None:
            self.price_list = price_list
        if payment_term_type is not None:
            self.payment_term_type = payment_term_type
        if email is not None:
            self.email = email
        if telephones is not None:
            self.telephones = telephones
        if number is not None:
            self.number = number
        if account_number is not None:
            self.account_number = account_number
        if default_discount is not None:
            self.default_discount = default_discount
        if client_source is not None:
            self.client_source = client_source
        if account is not None:
            self.account = account
        if addresses is not None:
            self.addresses = addresses

    @property
    def id(self):
        """Gets the id of this ClientDetails.  # noqa: E501


        :return: The id of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientDetails.


        :param id: The id of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rfc(self):
        """Gets the rfc of this ClientDetails.  # noqa: E501


        :return: The rfc of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this ClientDetails.


        :param rfc: The rfc of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._rfc = rfc

    @property
    def legal_name(self):
        """Gets the legal_name of this ClientDetails.  # noqa: E501


        :return: The legal_name of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this ClientDetails.


        :param legal_name: The legal_name of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def commercial_name(self):
        """Gets the commercial_name of this ClientDetails.  # noqa: E501


        :return: The commercial_name of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._commercial_name

    @commercial_name.setter
    def commercial_name(self, commercial_name):
        """Sets the commercial_name of this ClientDetails.


        :param commercial_name: The commercial_name of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._commercial_name = commercial_name

    @property
    def credit_days(self):
        """Gets the credit_days of this ClientDetails.  # noqa: E501


        :return: The credit_days of this ClientDetails.  # noqa: E501
        :rtype: int
        """
        return self._credit_days

    @credit_days.setter
    def credit_days(self, credit_days):
        """Sets the credit_days of this ClientDetails.


        :param credit_days: The credit_days of this ClientDetails.  # noqa: E501
        :type: int
        """

        self._credit_days = credit_days

    @property
    def credit_amount(self):
        """Gets the credit_amount of this ClientDetails.  # noqa: E501


        :return: The credit_amount of this ClientDetails.  # noqa: E501
        :rtype: float
        """
        return self._credit_amount

    @credit_amount.setter
    def credit_amount(self, credit_amount):
        """Sets the credit_amount of this ClientDetails.


        :param credit_amount: The credit_amount of this ClientDetails.  # noqa: E501
        :type: float
        """

        self._credit_amount = credit_amount

    @property
    def payment_method(self):
        """Gets the payment_method of this ClientDetails.  # noqa: E501


        :return: The payment_method of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ClientDetails.


        :param payment_method: The payment_method of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def creation_date(self):
        """Gets the creation_date of this ClientDetails.  # noqa: E501


        :return: The creation_date of this ClientDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ClientDetails.


        :param creation_date: The creation_date of this ClientDetails.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def status(self):
        """Gets the status of this ClientDetails.  # noqa: E501


        :return: The status of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientDetails.


        :param status: The status of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sales_contact(self):
        """Gets the sales_contact of this ClientDetails.  # noqa: E501


        :return: The sales_contact of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._sales_contact

    @sales_contact.setter
    def sales_contact(self, sales_contact):
        """Sets the sales_contact of this ClientDetails.


        :param sales_contact: The sales_contact of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._sales_contact = sales_contact

    @property
    def credit_contact(self):
        """Gets the credit_contact of this ClientDetails.  # noqa: E501


        :return: The credit_contact of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._credit_contact

    @credit_contact.setter
    def credit_contact(self, credit_contact):
        """Sets the credit_contact of this ClientDetails.


        :param credit_contact: The credit_contact of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._credit_contact = credit_contact

    @property
    def loctaion(self):
        """Gets the loctaion of this ClientDetails.  # noqa: E501


        :return: The loctaion of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._loctaion

    @loctaion.setter
    def loctaion(self, loctaion):
        """Sets the loctaion of this ClientDetails.


        :param loctaion: The loctaion of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._loctaion = loctaion

    @property
    def comments(self):
        """Gets the comments of this ClientDetails.  # noqa: E501


        :return: The comments of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ClientDetails.


        :param comments: The comments of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def price_list(self):
        """Gets the price_list of this ClientDetails.  # noqa: E501


        :return: The price_list of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """Sets the price_list of this ClientDetails.


        :param price_list: The price_list of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._price_list = price_list

    @property
    def payment_term_type(self):
        """Gets the payment_term_type of this ClientDetails.  # noqa: E501


        :return: The payment_term_type of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._payment_term_type

    @payment_term_type.setter
    def payment_term_type(self, payment_term_type):
        """Sets the payment_term_type of this ClientDetails.


        :param payment_term_type: The payment_term_type of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._payment_term_type = payment_term_type

    @property
    def email(self):
        """Gets the email of this ClientDetails.  # noqa: E501


        :return: The email of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClientDetails.


        :param email: The email of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def telephones(self):
        """Gets the telephones of this ClientDetails.  # noqa: E501


        :return: The telephones of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._telephones

    @telephones.setter
    def telephones(self, telephones):
        """Sets the telephones of this ClientDetails.


        :param telephones: The telephones of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._telephones = telephones

    @property
    def number(self):
        """Gets the number of this ClientDetails.  # noqa: E501


        :return: The number of this ClientDetails.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ClientDetails.


        :param number: The number of this ClientDetails.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def account_number(self):
        """Gets the account_number of this ClientDetails.  # noqa: E501


        :return: The account_number of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ClientDetails.


        :param account_number: The account_number of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def default_discount(self):
        """Gets the default_discount of this ClientDetails.  # noqa: E501


        :return: The default_discount of this ClientDetails.  # noqa: E501
        :rtype: float
        """
        return self._default_discount

    @default_discount.setter
    def default_discount(self, default_discount):
        """Sets the default_discount of this ClientDetails.


        :param default_discount: The default_discount of this ClientDetails.  # noqa: E501
        :type: float
        """

        self._default_discount = default_discount

    @property
    def client_source(self):
        """Gets the client_source of this ClientDetails.  # noqa: E501


        :return: The client_source of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._client_source

    @client_source.setter
    def client_source(self, client_source):
        """Sets the client_source of this ClientDetails.


        :param client_source: The client_source of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._client_source = client_source

    @property
    def account(self):
        """Gets the account of this ClientDetails.  # noqa: E501


        :return: The account of this ClientDetails.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ClientDetails.


        :param account: The account of this ClientDetails.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def addresses(self):
        """Gets the addresses of this ClientDetails.  # noqa: E501


        :return: The addresses of this ClientDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ClientDetails.


        :param addresses: The addresses of this ClientDetails.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
