# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'cost': 'float',
        'price': 'float',
        'currency_id': 'str',
        'exchange_rate': 'float',
        'code': 'str',
        'description': 'str',
        'sku': 'str',
        'category1_id': 'str',
        'category2_id': 'str',
        'category3_id': 'str',
        'ieps': 'float'
    }

    attribute_map = {
        'title': 'Title',
        'cost': 'Cost',
        'price': 'Price',
        'currency_id': 'CurrencyId',
        'exchange_rate': 'ExchangeRate',
        'code': 'Code',
        'description': 'Description',
        'sku': 'SKU',
        'category1_id': 'Category1Id',
        'category2_id': 'Category2Id',
        'category3_id': 'Category3Id',
        'ieps': 'IEPS'
    }

    def __init__(self, title=None, cost=None, price=None, currency_id=None, exchange_rate=None, code=None, description=None, sku=None, category1_id=None, category2_id=None, category3_id=None, ieps=None):  # noqa: E501
        """NewProduct - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._cost = None
        self._price = None
        self._currency_id = None
        self._exchange_rate = None
        self._code = None
        self._description = None
        self._sku = None
        self._category1_id = None
        self._category2_id = None
        self._category3_id = None
        self._ieps = None
        self.discriminator = None

        self.title = title
        self.cost = cost
        self.price = price
        self.currency_id = currency_id
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        self.code = code
        if description is not None:
            self.description = description
        if sku is not None:
            self.sku = sku
        if category1_id is not None:
            self.category1_id = category1_id
        if category2_id is not None:
            self.category2_id = category2_id
        if category3_id is not None:
            self.category3_id = category3_id
        if ieps is not None:
            self.ieps = ieps

    @property
    def title(self):
        """Gets the title of this NewProduct.  # noqa: E501


        :return: The title of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewProduct.


        :param title: The title of this NewProduct.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def cost(self):
        """Gets the cost of this NewProduct.  # noqa: E501


        :return: The cost of this NewProduct.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this NewProduct.


        :param cost: The cost of this NewProduct.  # noqa: E501
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def price(self):
        """Gets the price of this NewProduct.  # noqa: E501


        :return: The price of this NewProduct.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this NewProduct.


        :param price: The price of this NewProduct.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def currency_id(self):
        """Gets the currency_id of this NewProduct.  # noqa: E501


        :return: The currency_id of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this NewProduct.


        :param currency_id: The currency_id of this NewProduct.  # noqa: E501
        :type: str
        """
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewProduct.  # noqa: E501


        :return: The exchange_rate of this NewProduct.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewProduct.


        :param exchange_rate: The exchange_rate of this NewProduct.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def code(self):
        """Gets the code of this NewProduct.  # noqa: E501


        :return: The code of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this NewProduct.


        :param code: The code of this NewProduct.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def description(self):
        """Gets the description of this NewProduct.  # noqa: E501


        :return: The description of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewProduct.


        :param description: The description of this NewProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sku(self):
        """Gets the sku of this NewProduct.  # noqa: E501


        :return: The sku of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this NewProduct.


        :param sku: The sku of this NewProduct.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def category1_id(self):
        """Gets the category1_id of this NewProduct.  # noqa: E501


        :return: The category1_id of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._category1_id

    @category1_id.setter
    def category1_id(self, category1_id):
        """Sets the category1_id of this NewProduct.


        :param category1_id: The category1_id of this NewProduct.  # noqa: E501
        :type: str
        """

        self._category1_id = category1_id

    @property
    def category2_id(self):
        """Gets the category2_id of this NewProduct.  # noqa: E501


        :return: The category2_id of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._category2_id

    @category2_id.setter
    def category2_id(self, category2_id):
        """Sets the category2_id of this NewProduct.


        :param category2_id: The category2_id of this NewProduct.  # noqa: E501
        :type: str
        """

        self._category2_id = category2_id

    @property
    def category3_id(self):
        """Gets the category3_id of this NewProduct.  # noqa: E501


        :return: The category3_id of this NewProduct.  # noqa: E501
        :rtype: str
        """
        return self._category3_id

    @category3_id.setter
    def category3_id(self, category3_id):
        """Sets the category3_id of this NewProduct.


        :param category3_id: The category3_id of this NewProduct.  # noqa: E501
        :type: str
        """

        self._category3_id = category3_id

    @property
    def ieps(self):
        """Gets the ieps of this NewProduct.  # noqa: E501


        :return: The ieps of this NewProduct.  # noqa: E501
        :rtype: float
        """
        return self._ieps

    @ieps.setter
    def ieps(self, ieps):
        """Sets the ieps of this NewProduct.


        :param ieps: The ieps of this NewProduct.  # noqa: E501
        :type: float
        """

        self._ieps = ieps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
