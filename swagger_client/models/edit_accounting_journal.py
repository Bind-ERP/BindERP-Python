# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.edit_accounting_journal_item import EditAccountingJournalItem  # noqa: F401,E501


class EditAccountingJournal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'date': 'datetime',
        'comments': 'str',
        'location_id': 'str',
        'journal_items': 'list[EditAccountingJournalItem]'
    }

    attribute_map = {
        'id': 'ID',
        'date': 'Date',
        'comments': 'Comments',
        'location_id': 'LocationID',
        'journal_items': 'JournalItems'
    }

    def __init__(self, id=None, date=None, comments=None, location_id=None, journal_items=None):  # noqa: E501
        """EditAccountingJournal - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date = None
        self._comments = None
        self._location_id = None
        self._journal_items = None
        self.discriminator = None

        self.id = id
        self.date = date
        if comments is not None:
            self.comments = comments
        if location_id is not None:
            self.location_id = location_id
        if journal_items is not None:
            self.journal_items = journal_items

    @property
    def id(self):
        """Gets the id of this EditAccountingJournal.  # noqa: E501


        :return: The id of this EditAccountingJournal.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditAccountingJournal.


        :param id: The id of this EditAccountingJournal.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date(self):
        """Gets the date of this EditAccountingJournal.  # noqa: E501


        :return: The date of this EditAccountingJournal.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this EditAccountingJournal.


        :param date: The date of this EditAccountingJournal.  # noqa: E501
        :type: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def comments(self):
        """Gets the comments of this EditAccountingJournal.  # noqa: E501


        :return: The comments of this EditAccountingJournal.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EditAccountingJournal.


        :param comments: The comments of this EditAccountingJournal.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def location_id(self):
        """Gets the location_id of this EditAccountingJournal.  # noqa: E501


        :return: The location_id of this EditAccountingJournal.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this EditAccountingJournal.


        :param location_id: The location_id of this EditAccountingJournal.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def journal_items(self):
        """Gets the journal_items of this EditAccountingJournal.  # noqa: E501


        :return: The journal_items of this EditAccountingJournal.  # noqa: E501
        :rtype: list[EditAccountingJournalItem]
        """
        return self._journal_items

    @journal_items.setter
    def journal_items(self, journal_items):
        """Sets the journal_items of this EditAccountingJournal.


        :param journal_items: The journal_items of this EditAccountingJournal.  # noqa: E501
        :type: list[EditAccountingJournalItem]
        """

        self._journal_items = journal_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditAccountingJournal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
