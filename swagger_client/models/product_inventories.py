# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductInventories(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warehouse_name': 'str',
        'min': 'float',
        'max': 'float',
        'location': 'str',
        'visible': 'bool',
        'inventory': 'float'
    }

    attribute_map = {
        'warehouse_name': 'WarehouseName',
        'min': 'Min',
        'max': 'Max',
        'location': 'Location',
        'visible': 'Visible',
        'inventory': 'Inventory'
    }

    def __init__(self, warehouse_name=None, min=None, max=None, location=None, visible=None, inventory=None):  # noqa: E501
        """ProductInventories - a model defined in Swagger"""  # noqa: E501

        self._warehouse_name = None
        self._min = None
        self._max = None
        self._location = None
        self._visible = None
        self._inventory = None
        self.discriminator = None

        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if location is not None:
            self.location = location
        if visible is not None:
            self.visible = visible
        if inventory is not None:
            self.inventory = inventory

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this ProductInventories.  # noqa: E501


        :return: The warehouse_name of this ProductInventories.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this ProductInventories.


        :param warehouse_name: The warehouse_name of this ProductInventories.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def min(self):
        """Gets the min of this ProductInventories.  # noqa: E501


        :return: The min of this ProductInventories.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this ProductInventories.


        :param min: The min of this ProductInventories.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this ProductInventories.  # noqa: E501


        :return: The max of this ProductInventories.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this ProductInventories.


        :param max: The max of this ProductInventories.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def location(self):
        """Gets the location of this ProductInventories.  # noqa: E501


        :return: The location of this ProductInventories.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProductInventories.


        :param location: The location of this ProductInventories.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def visible(self):
        """Gets the visible of this ProductInventories.  # noqa: E501


        :return: The visible of this ProductInventories.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ProductInventories.


        :param visible: The visible of this ProductInventories.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def inventory(self):
        """Gets the inventory of this ProductInventories.  # noqa: E501


        :return: The inventory of this ProductInventories.  # noqa: E501
        :rtype: float
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this ProductInventories.


        :param inventory: The inventory of this ProductInventories.  # noqa: E501
        :type: float
        """

        self._inventory = inventory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductInventories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
