# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewInvoiceProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'price': 'float',
        'qty': 'float',
        'unit': 'str',
        'vat': 'float',
        'index_number': 'int',
        'ieps': 'float',
        'ieps_type': 'int',
        'comments': 'str',
        'vat_exempt': 'bool',
        'require_lot': 'bool',
        'selected_imports': 'list[str]',
        'order_item_id': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'price': 'Price',
        'qty': 'Qty',
        'unit': 'Unit',
        'vat': 'VAT',
        'index_number': 'IndexNumber',
        'ieps': 'IEPS',
        'ieps_type': 'IEPSType',
        'comments': 'Comments',
        'vat_exempt': 'VATExempt',
        'require_lot': 'RequireLot',
        'selected_imports': 'SelectedImports',
        'order_item_id': 'OrderItemID'
    }

    def __init__(self, id=None, price=None, qty=None, unit=None, vat=None, index_number=None, ieps=None, ieps_type=None, comments=None, vat_exempt=None, require_lot=None, selected_imports=None, order_item_id=None):  # noqa: E501
        """NewInvoiceProduct - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._price = None
        self._qty = None
        self._unit = None
        self._vat = None
        self._index_number = None
        self._ieps = None
        self._ieps_type = None
        self._comments = None
        self._vat_exempt = None
        self._require_lot = None
        self._selected_imports = None
        self._order_item_id = None
        self.discriminator = None

        self.id = id
        self.price = price
        self.qty = qty
        self.unit = unit
        if vat is not None:
            self.vat = vat
        if index_number is not None:
            self.index_number = index_number
        if ieps is not None:
            self.ieps = ieps
        if ieps_type is not None:
            self.ieps_type = ieps_type
        if comments is not None:
            self.comments = comments
        if vat_exempt is not None:
            self.vat_exempt = vat_exempt
        if require_lot is not None:
            self.require_lot = require_lot
        if selected_imports is not None:
            self.selected_imports = selected_imports
        if order_item_id is not None:
            self.order_item_id = order_item_id

    @property
    def id(self):
        """Gets the id of this NewInvoiceProduct.  # noqa: E501


        :return: The id of this NewInvoiceProduct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewInvoiceProduct.


        :param id: The id of this NewInvoiceProduct.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def price(self):
        """Gets the price of this NewInvoiceProduct.  # noqa: E501


        :return: The price of this NewInvoiceProduct.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this NewInvoiceProduct.


        :param price: The price of this NewInvoiceProduct.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def qty(self):
        """Gets the qty of this NewInvoiceProduct.  # noqa: E501


        :return: The qty of this NewInvoiceProduct.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this NewInvoiceProduct.


        :param qty: The qty of this NewInvoiceProduct.  # noqa: E501
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def unit(self):
        """Gets the unit of this NewInvoiceProduct.  # noqa: E501


        :return: The unit of this NewInvoiceProduct.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this NewInvoiceProduct.


        :param unit: The unit of this NewInvoiceProduct.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def vat(self):
        """Gets the vat of this NewInvoiceProduct.  # noqa: E501


        :return: The vat of this NewInvoiceProduct.  # noqa: E501
        :rtype: float
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this NewInvoiceProduct.


        :param vat: The vat of this NewInvoiceProduct.  # noqa: E501
        :type: float
        """

        self._vat = vat

    @property
    def index_number(self):
        """Gets the index_number of this NewInvoiceProduct.  # noqa: E501


        :return: The index_number of this NewInvoiceProduct.  # noqa: E501
        :rtype: int
        """
        return self._index_number

    @index_number.setter
    def index_number(self, index_number):
        """Sets the index_number of this NewInvoiceProduct.


        :param index_number: The index_number of this NewInvoiceProduct.  # noqa: E501
        :type: int
        """

        self._index_number = index_number

    @property
    def ieps(self):
        """Gets the ieps of this NewInvoiceProduct.  # noqa: E501


        :return: The ieps of this NewInvoiceProduct.  # noqa: E501
        :rtype: float
        """
        return self._ieps

    @ieps.setter
    def ieps(self, ieps):
        """Sets the ieps of this NewInvoiceProduct.


        :param ieps: The ieps of this NewInvoiceProduct.  # noqa: E501
        :type: float
        """

        self._ieps = ieps

    @property
    def ieps_type(self):
        """Gets the ieps_type of this NewInvoiceProduct.  # noqa: E501


        :return: The ieps_type of this NewInvoiceProduct.  # noqa: E501
        :rtype: int
        """
        return self._ieps_type

    @ieps_type.setter
    def ieps_type(self, ieps_type):
        """Sets the ieps_type of this NewInvoiceProduct.


        :param ieps_type: The ieps_type of this NewInvoiceProduct.  # noqa: E501
        :type: int
        """

        self._ieps_type = ieps_type

    @property
    def comments(self):
        """Gets the comments of this NewInvoiceProduct.  # noqa: E501


        :return: The comments of this NewInvoiceProduct.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this NewInvoiceProduct.


        :param comments: The comments of this NewInvoiceProduct.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def vat_exempt(self):
        """Gets the vat_exempt of this NewInvoiceProduct.  # noqa: E501


        :return: The vat_exempt of this NewInvoiceProduct.  # noqa: E501
        :rtype: bool
        """
        return self._vat_exempt

    @vat_exempt.setter
    def vat_exempt(self, vat_exempt):
        """Sets the vat_exempt of this NewInvoiceProduct.


        :param vat_exempt: The vat_exempt of this NewInvoiceProduct.  # noqa: E501
        :type: bool
        """

        self._vat_exempt = vat_exempt

    @property
    def require_lot(self):
        """Gets the require_lot of this NewInvoiceProduct.  # noqa: E501


        :return: The require_lot of this NewInvoiceProduct.  # noqa: E501
        :rtype: bool
        """
        return self._require_lot

    @require_lot.setter
    def require_lot(self, require_lot):
        """Sets the require_lot of this NewInvoiceProduct.


        :param require_lot: The require_lot of this NewInvoiceProduct.  # noqa: E501
        :type: bool
        """

        self._require_lot = require_lot

    @property
    def selected_imports(self):
        """Gets the selected_imports of this NewInvoiceProduct.  # noqa: E501


        :return: The selected_imports of this NewInvoiceProduct.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_imports

    @selected_imports.setter
    def selected_imports(self, selected_imports):
        """Sets the selected_imports of this NewInvoiceProduct.


        :param selected_imports: The selected_imports of this NewInvoiceProduct.  # noqa: E501
        :type: list[str]
        """

        self._selected_imports = selected_imports

    @property
    def order_item_id(self):
        """Gets the order_item_id of this NewInvoiceProduct.  # noqa: E501


        :return: The order_item_id of this NewInvoiceProduct.  # noqa: E501
        :rtype: str
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this NewInvoiceProduct.


        :param order_item_id: The order_item_id of this NewInvoiceProduct.  # noqa: E501
        :type: str
        """

        self._order_item_id = order_item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewInvoiceProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
