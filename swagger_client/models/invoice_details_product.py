# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvoiceDetailsProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'name': 'str',
        'index_number': 'int',
        'code': 'str',
        'unit': 'str',
        'unit_multiplier': 'float',
        'qty': 'float',
        'price': 'float',
        'vat_rate': 'float',
        'ieps_rate': 'float',
        'discount': 'float',
        'comments': 'str',
        'lot_info': 'str'
    }

    attribute_map = {
        'product_id': 'ProductID',
        'name': 'Name',
        'index_number': 'IndexNumber',
        'code': 'Code',
        'unit': 'Unit',
        'unit_multiplier': 'UnitMultiplier',
        'qty': 'Qty',
        'price': 'Price',
        'vat_rate': 'VATRate',
        'ieps_rate': 'IEPSRate',
        'discount': 'Discount',
        'comments': 'Comments',
        'lot_info': 'LotInfo'
    }

    def __init__(self, product_id=None, name=None, index_number=None, code=None, unit=None, unit_multiplier=None, qty=None, price=None, vat_rate=None, ieps_rate=None, discount=None, comments=None, lot_info=None):  # noqa: E501
        """InvoiceDetailsProduct - a model defined in Swagger"""  # noqa: E501

        self._product_id = None
        self._name = None
        self._index_number = None
        self._code = None
        self._unit = None
        self._unit_multiplier = None
        self._qty = None
        self._price = None
        self._vat_rate = None
        self._ieps_rate = None
        self._discount = None
        self._comments = None
        self._lot_info = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if name is not None:
            self.name = name
        if index_number is not None:
            self.index_number = index_number
        if code is not None:
            self.code = code
        if unit is not None:
            self.unit = unit
        if unit_multiplier is not None:
            self.unit_multiplier = unit_multiplier
        if qty is not None:
            self.qty = qty
        if price is not None:
            self.price = price
        if vat_rate is not None:
            self.vat_rate = vat_rate
        if ieps_rate is not None:
            self.ieps_rate = ieps_rate
        if discount is not None:
            self.discount = discount
        if comments is not None:
            self.comments = comments
        if lot_info is not None:
            self.lot_info = lot_info

    @property
    def product_id(self):
        """Gets the product_id of this InvoiceDetailsProduct.  # noqa: E501


        :return: The product_id of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InvoiceDetailsProduct.


        :param product_id: The product_id of this InvoiceDetailsProduct.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def name(self):
        """Gets the name of this InvoiceDetailsProduct.  # noqa: E501


        :return: The name of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceDetailsProduct.


        :param name: The name of this InvoiceDetailsProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def index_number(self):
        """Gets the index_number of this InvoiceDetailsProduct.  # noqa: E501


        :return: The index_number of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: int
        """
        return self._index_number

    @index_number.setter
    def index_number(self, index_number):
        """Sets the index_number of this InvoiceDetailsProduct.


        :param index_number: The index_number of this InvoiceDetailsProduct.  # noqa: E501
        :type: int
        """

        self._index_number = index_number

    @property
    def code(self):
        """Gets the code of this InvoiceDetailsProduct.  # noqa: E501


        :return: The code of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InvoiceDetailsProduct.


        :param code: The code of this InvoiceDetailsProduct.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def unit(self):
        """Gets the unit of this InvoiceDetailsProduct.  # noqa: E501


        :return: The unit of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InvoiceDetailsProduct.


        :param unit: The unit of this InvoiceDetailsProduct.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this InvoiceDetailsProduct.  # noqa: E501


        :return: The unit_multiplier of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this InvoiceDetailsProduct.


        :param unit_multiplier: The unit_multiplier of this InvoiceDetailsProduct.  # noqa: E501
        :type: float
        """

        self._unit_multiplier = unit_multiplier

    @property
    def qty(self):
        """Gets the qty of this InvoiceDetailsProduct.  # noqa: E501


        :return: The qty of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this InvoiceDetailsProduct.


        :param qty: The qty of this InvoiceDetailsProduct.  # noqa: E501
        :type: float
        """

        self._qty = qty

    @property
    def price(self):
        """Gets the price of this InvoiceDetailsProduct.  # noqa: E501


        :return: The price of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InvoiceDetailsProduct.


        :param price: The price of this InvoiceDetailsProduct.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def vat_rate(self):
        """Gets the vat_rate of this InvoiceDetailsProduct.  # noqa: E501


        :return: The vat_rate of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this InvoiceDetailsProduct.


        :param vat_rate: The vat_rate of this InvoiceDetailsProduct.  # noqa: E501
        :type: float
        """

        self._vat_rate = vat_rate

    @property
    def ieps_rate(self):
        """Gets the ieps_rate of this InvoiceDetailsProduct.  # noqa: E501


        :return: The ieps_rate of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: float
        """
        return self._ieps_rate

    @ieps_rate.setter
    def ieps_rate(self, ieps_rate):
        """Sets the ieps_rate of this InvoiceDetailsProduct.


        :param ieps_rate: The ieps_rate of this InvoiceDetailsProduct.  # noqa: E501
        :type: float
        """

        self._ieps_rate = ieps_rate

    @property
    def discount(self):
        """Gets the discount of this InvoiceDetailsProduct.  # noqa: E501


        :return: The discount of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this InvoiceDetailsProduct.


        :param discount: The discount of this InvoiceDetailsProduct.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def comments(self):
        """Gets the comments of this InvoiceDetailsProduct.  # noqa: E501


        :return: The comments of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InvoiceDetailsProduct.


        :param comments: The comments of this InvoiceDetailsProduct.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def lot_info(self):
        """Gets the lot_info of this InvoiceDetailsProduct.  # noqa: E501


        :return: The lot_info of this InvoiceDetailsProduct.  # noqa: E501
        :rtype: str
        """
        return self._lot_info

    @lot_info.setter
    def lot_info(self, lot_info):
        """Sets the lot_info of this InvoiceDetailsProduct.


        :param lot_info: The lot_info of this InvoiceDetailsProduct.  # noqa: E501
        :type: str
        """

        self._lot_info = lot_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceDetailsProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
