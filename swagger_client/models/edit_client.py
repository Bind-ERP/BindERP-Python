# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EditClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'legal_name': 'str',
        'commercial_name': 'str',
        'rfc': 'str',
        'credit_days': 'int',
        'credit_amount': 'float',
        'price_list_id': 'str',
        'accounting_number': 'str',
        'payment_method': 'int',
        'payment_term': 'int',
        'location_id': 'str',
        'sales_employee_id': 'str',
        'credit_employee_id': 'str',
        'comment': 'str',
        'telephone': 'str',
        'email': 'str',
        'account_number': 'str',
        'default_discount': 'float',
        'source': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'legal_name': 'LegalName',
        'commercial_name': 'CommercialName',
        'rfc': 'RFC',
        'credit_days': 'CreditDays',
        'credit_amount': 'CreditAmount',
        'price_list_id': 'PriceListID',
        'accounting_number': 'AccountingNumber',
        'payment_method': 'PaymentMethod',
        'payment_term': 'PaymentTerm',
        'location_id': 'LocationID',
        'sales_employee_id': 'SalesEmployeeID',
        'credit_employee_id': 'CreditEmployeeID',
        'comment': 'Comment',
        'telephone': 'Telephone',
        'email': 'Email',
        'account_number': 'AccountNumber',
        'default_discount': 'DefaultDiscount',
        'source': 'Source'
    }

    def __init__(self, id=None, legal_name=None, commercial_name=None, rfc=None, credit_days=None, credit_amount=None, price_list_id=None, accounting_number=None, payment_method=None, payment_term=None, location_id=None, sales_employee_id=None, credit_employee_id=None, comment=None, telephone=None, email=None, account_number=None, default_discount=None, source=None):  # noqa: E501
        """EditClient - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._legal_name = None
        self._commercial_name = None
        self._rfc = None
        self._credit_days = None
        self._credit_amount = None
        self._price_list_id = None
        self._accounting_number = None
        self._payment_method = None
        self._payment_term = None
        self._location_id = None
        self._sales_employee_id = None
        self._credit_employee_id = None
        self._comment = None
        self._telephone = None
        self._email = None
        self._account_number = None
        self._default_discount = None
        self._source = None
        self.discriminator = None

        self.id = id
        self.legal_name = legal_name
        self.commercial_name = commercial_name
        self.rfc = rfc
        self.credit_days = credit_days
        self.credit_amount = credit_amount
        self.price_list_id = price_list_id
        self.accounting_number = accounting_number
        if payment_method is not None:
            self.payment_method = payment_method
        if payment_term is not None:
            self.payment_term = payment_term
        if location_id is not None:
            self.location_id = location_id
        if sales_employee_id is not None:
            self.sales_employee_id = sales_employee_id
        if credit_employee_id is not None:
            self.credit_employee_id = credit_employee_id
        if comment is not None:
            self.comment = comment
        if telephone is not None:
            self.telephone = telephone
        if email is not None:
            self.email = email
        if account_number is not None:
            self.account_number = account_number
        if default_discount is not None:
            self.default_discount = default_discount
        if source is not None:
            self.source = source

    @property
    def id(self):
        """Gets the id of this EditClient.  # noqa: E501


        :return: The id of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditClient.


        :param id: The id of this EditClient.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def legal_name(self):
        """Gets the legal_name of this EditClient.  # noqa: E501


        :return: The legal_name of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this EditClient.


        :param legal_name: The legal_name of this EditClient.  # noqa: E501
        :type: str
        """
        if legal_name is None:
            raise ValueError("Invalid value for `legal_name`, must not be `None`")  # noqa: E501

        self._legal_name = legal_name

    @property
    def commercial_name(self):
        """Gets the commercial_name of this EditClient.  # noqa: E501


        :return: The commercial_name of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._commercial_name

    @commercial_name.setter
    def commercial_name(self, commercial_name):
        """Sets the commercial_name of this EditClient.


        :param commercial_name: The commercial_name of this EditClient.  # noqa: E501
        :type: str
        """
        if commercial_name is None:
            raise ValueError("Invalid value for `commercial_name`, must not be `None`")  # noqa: E501

        self._commercial_name = commercial_name

    @property
    def rfc(self):
        """Gets the rfc of this EditClient.  # noqa: E501


        :return: The rfc of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this EditClient.


        :param rfc: The rfc of this EditClient.  # noqa: E501
        :type: str
        """
        if rfc is None:
            raise ValueError("Invalid value for `rfc`, must not be `None`")  # noqa: E501
        if rfc is not None and not re.search('[A-Z,a-z,ñ,Ñ,&]{3,4}[0-9]{2}[0-1][0-9][0-3][0-9][A-Z,a-z,0-9]?[A-Z,a-z,0-9]?[0-9,A-Z,a-z]?', rfc):  # noqa: E501
            raise ValueError("Invalid value for `rfc`, must be a follow pattern or equal to `/[A-Z,a-z,ñ,Ñ,&]{3,4}[0-9]{2}[0-1][0-9][0-3][0-9][A-Z,a-z,0-9]?[A-Z,a-z,0-9]?[0-9,A-Z,a-z]?/`")  # noqa: E501

        self._rfc = rfc

    @property
    def credit_days(self):
        """Gets the credit_days of this EditClient.  # noqa: E501


        :return: The credit_days of this EditClient.  # noqa: E501
        :rtype: int
        """
        return self._credit_days

    @credit_days.setter
    def credit_days(self, credit_days):
        """Sets the credit_days of this EditClient.


        :param credit_days: The credit_days of this EditClient.  # noqa: E501
        :type: int
        """
        if credit_days is None:
            raise ValueError("Invalid value for `credit_days`, must not be `None`")  # noqa: E501

        self._credit_days = credit_days

    @property
    def credit_amount(self):
        """Gets the credit_amount of this EditClient.  # noqa: E501


        :return: The credit_amount of this EditClient.  # noqa: E501
        :rtype: float
        """
        return self._credit_amount

    @credit_amount.setter
    def credit_amount(self, credit_amount):
        """Sets the credit_amount of this EditClient.


        :param credit_amount: The credit_amount of this EditClient.  # noqa: E501
        :type: float
        """
        if credit_amount is None:
            raise ValueError("Invalid value for `credit_amount`, must not be `None`")  # noqa: E501

        self._credit_amount = credit_amount

    @property
    def price_list_id(self):
        """Gets the price_list_id of this EditClient.  # noqa: E501


        :return: The price_list_id of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._price_list_id

    @price_list_id.setter
    def price_list_id(self, price_list_id):
        """Sets the price_list_id of this EditClient.


        :param price_list_id: The price_list_id of this EditClient.  # noqa: E501
        :type: str
        """
        if price_list_id is None:
            raise ValueError("Invalid value for `price_list_id`, must not be `None`")  # noqa: E501

        self._price_list_id = price_list_id

    @property
    def accounting_number(self):
        """Gets the accounting_number of this EditClient.  # noqa: E501


        :return: The accounting_number of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._accounting_number

    @accounting_number.setter
    def accounting_number(self, accounting_number):
        """Sets the accounting_number of this EditClient.


        :param accounting_number: The accounting_number of this EditClient.  # noqa: E501
        :type: str
        """
        if accounting_number is None:
            raise ValueError("Invalid value for `accounting_number`, must not be `None`")  # noqa: E501

        self._accounting_number = accounting_number

    @property
    def payment_method(self):
        """Gets the payment_method of this EditClient.  # noqa: E501


        :return: The payment_method of this EditClient.  # noqa: E501
        :rtype: int
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this EditClient.


        :param payment_method: The payment_method of this EditClient.  # noqa: E501
        :type: int
        """

        self._payment_method = payment_method

    @property
    def payment_term(self):
        """Gets the payment_term of this EditClient.  # noqa: E501


        :return: The payment_term of this EditClient.  # noqa: E501
        :rtype: int
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this EditClient.


        :param payment_term: The payment_term of this EditClient.  # noqa: E501
        :type: int
        """

        self._payment_term = payment_term

    @property
    def location_id(self):
        """Gets the location_id of this EditClient.  # noqa: E501


        :return: The location_id of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this EditClient.


        :param location_id: The location_id of this EditClient.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def sales_employee_id(self):
        """Gets the sales_employee_id of this EditClient.  # noqa: E501


        :return: The sales_employee_id of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._sales_employee_id

    @sales_employee_id.setter
    def sales_employee_id(self, sales_employee_id):
        """Sets the sales_employee_id of this EditClient.


        :param sales_employee_id: The sales_employee_id of this EditClient.  # noqa: E501
        :type: str
        """

        self._sales_employee_id = sales_employee_id

    @property
    def credit_employee_id(self):
        """Gets the credit_employee_id of this EditClient.  # noqa: E501


        :return: The credit_employee_id of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._credit_employee_id

    @credit_employee_id.setter
    def credit_employee_id(self, credit_employee_id):
        """Sets the credit_employee_id of this EditClient.


        :param credit_employee_id: The credit_employee_id of this EditClient.  # noqa: E501
        :type: str
        """

        self._credit_employee_id = credit_employee_id

    @property
    def comment(self):
        """Gets the comment of this EditClient.  # noqa: E501


        :return: The comment of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EditClient.


        :param comment: The comment of this EditClient.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def telephone(self):
        """Gets the telephone of this EditClient.  # noqa: E501


        :return: The telephone of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this EditClient.


        :param telephone: The telephone of this EditClient.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def email(self):
        """Gets the email of this EditClient.  # noqa: E501


        :return: The email of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EditClient.


        :param email: The email of this EditClient.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def account_number(self):
        """Gets the account_number of this EditClient.  # noqa: E501


        :return: The account_number of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this EditClient.


        :param account_number: The account_number of this EditClient.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def default_discount(self):
        """Gets the default_discount of this EditClient.  # noqa: E501


        :return: The default_discount of this EditClient.  # noqa: E501
        :rtype: float
        """
        return self._default_discount

    @default_discount.setter
    def default_discount(self, default_discount):
        """Sets the default_discount of this EditClient.


        :param default_discount: The default_discount of this EditClient.  # noqa: E501
        :type: float
        """

        self._default_discount = default_discount

    @property
    def source(self):
        """Gets the source of this EditClient.  # noqa: E501


        :return: The source of this EditClient.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EditClient.


        :param source: The source of this EditClient.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
