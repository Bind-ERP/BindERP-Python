# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.i_edm_type_reference import IEdmTypeReference  # noqa: F401,E501


class SingleValueNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_reference': 'IEdmTypeReference',
        'kind': 'str'
    }

    attribute_map = {
        'type_reference': 'TypeReference',
        'kind': 'Kind'
    }

    def __init__(self, type_reference=None, kind=None):  # noqa: E501
        """SingleValueNode - a model defined in Swagger"""  # noqa: E501

        self._type_reference = None
        self._kind = None
        self.discriminator = None

        if type_reference is not None:
            self.type_reference = type_reference
        if kind is not None:
            self.kind = kind

    @property
    def type_reference(self):
        """Gets the type_reference of this SingleValueNode.  # noqa: E501


        :return: The type_reference of this SingleValueNode.  # noqa: E501
        :rtype: IEdmTypeReference
        """
        return self._type_reference

    @type_reference.setter
    def type_reference(self, type_reference):
        """Sets the type_reference of this SingleValueNode.


        :param type_reference: The type_reference of this SingleValueNode.  # noqa: E501
        :type: IEdmTypeReference
        """

        self._type_reference = type_reference

    @property
    def kind(self):
        """Gets the kind of this SingleValueNode.  # noqa: E501


        :return: The kind of this SingleValueNode.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SingleValueNode.


        :param kind: The kind of this SingleValueNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Constant", "Convert", "NonentityRangeVariableReference", "BinaryOperator", "UnaryOperator", "SingleValuePropertyAccess", "CollectionPropertyAccess", "SingleValueFunctionCall", "Any", "CollectionNavigationNode", "SingleNavigationNode", "SingleValueOpenPropertyAccess", "SingleEntityCast", "All", "EntityCollectionCast", "EntityRangeVariableReference", "SingleEntityFunctionCall", "CollectionFunctionCall", "EntityCollectionFunctionCall", "NamedFunctionParameter"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleValueNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
