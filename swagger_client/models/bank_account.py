# coding: utf-8

"""
    Bind ERP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'int',
        'type_text': 'str',
        'bank_id': 'str',
        'bank_name': 'str',
        'name': 'str',
        'balance': 'float',
        'currency_id': 'str',
        'currency_code': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'type': 'Type',
        'type_text': 'TypeText',
        'bank_id': 'BankID',
        'bank_name': 'BankName',
        'name': 'Name',
        'balance': 'Balance',
        'currency_id': 'CurrencyID',
        'currency_code': 'CurrencyCode'
    }

    def __init__(self, id=None, type=None, type_text=None, bank_id=None, bank_name=None, name=None, balance=None, currency_id=None, currency_code=None):  # noqa: E501
        """BankAccount - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._type_text = None
        self._bank_id = None
        self._bank_name = None
        self._name = None
        self._balance = None
        self._currency_id = None
        self._currency_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if type_text is not None:
            self.type_text = type_text
        if bank_id is not None:
            self.bank_id = bank_id
        if bank_name is not None:
            self.bank_name = bank_name
        if name is not None:
            self.name = name
        if balance is not None:
            self.balance = balance
        if currency_id is not None:
            self.currency_id = currency_id
        if currency_code is not None:
            self.currency_code = currency_code

    @property
    def id(self):
        """Gets the id of this BankAccount.  # noqa: E501


        :return: The id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.


        :param id: The id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this BankAccount.  # noqa: E501


        :return: The type of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankAccount.


        :param type: The type of this BankAccount.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def type_text(self):
        """Gets the type_text of this BankAccount.  # noqa: E501


        :return: The type_text of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._type_text

    @type_text.setter
    def type_text(self, type_text):
        """Sets the type_text of this BankAccount.


        :param type_text: The type_text of this BankAccount.  # noqa: E501
        :type: str
        """

        self._type_text = type_text

    @property
    def bank_id(self):
        """Gets the bank_id of this BankAccount.  # noqa: E501


        :return: The bank_id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this BankAccount.


        :param bank_id: The bank_id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._bank_id = bank_id

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccount.  # noqa: E501


        :return: The bank_name of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccount.


        :param bank_name: The bank_name of this BankAccount.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def name(self):
        """Gets the name of this BankAccount.  # noqa: E501


        :return: The name of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankAccount.


        :param name: The name of this BankAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def balance(self):
        """Gets the balance of this BankAccount.  # noqa: E501


        :return: The balance of this BankAccount.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BankAccount.


        :param balance: The balance of this BankAccount.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def currency_id(self):
        """Gets the currency_id of this BankAccount.  # noqa: E501


        :return: The currency_id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this BankAccount.


        :param currency_id: The currency_id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def currency_code(self):
        """Gets the currency_code of this BankAccount.  # noqa: E501


        :return: The currency_code of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BankAccount.


        :param currency_code: The currency_code of this BankAccount.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
